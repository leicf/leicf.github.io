<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx</title>
      <link href="/2020/06/22/Nginx/nginx/"/>
      <url>/2020/06/22/Nginx/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Nginx"><a href="#一、什么是Nginx" class="headerlink" title="一、什么是Nginx"></a>一、什么是Nginx</h2><p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。<br>具体体现为：</p><ul><li>高并发：Nginx使用基于事件驱动架构，使得其可以支持数以百万级别的TCP连接</li><li>易拓展：高度的模块化和自由软件许可证使得第三方模块层出不穷</li><li>跨平台：Nginx是一个跨平台服务器，可以运行在Linux，Windows，FreeBSD，Solaris，AIX，Mac OS等操作系统上</li><li>高可靠性：核心框架代码的优秀设计、模块设计简洁高效、官方提供的常用模块都非常稳定。</li></ul><h2 id="二、Nginx有什么作用"><a href="#二、Nginx有什么作用" class="headerlink" title="二、Nginx有什么作用"></a>二、Nginx有什么作用</h2><blockquote><p>nginx主要作用分为几种：HTTP服务器，反向代理服务器，负载均衡</p></blockquote><h3 id="1-HTTP服务器"><a href="#1-HTTP服务器" class="headerlink" title="1. HTTP服务器"></a>1. HTTP服务器</h3><p>Nginx可以作为一个HTTP服务器，将服务器上的静态文件（如 html 页面，图片、视频等）通过HTTP协议让客户端获取到。即通过配置nginx，可以让我们通过url的方式，在网页上或者应用中拿到想要的网站页面，图片或视频等。<br><img src="/2020/06/22/Nginx/nginx/20191107135122874.png" alt="正向代理"></p><h3 id="2-反向代理服务器"><a href="#2-反向代理服务器" class="headerlink" title="2. 反向代理服务器"></a>2. 反向代理服务器</h3><p>Nginx可以作为一个反向代理服务器。用户只知道Nginx服务器的地址，当Nginx服务器收到用户的请求，根据事先配置好的策略，再向相应的业务服务器发起请求，并将服务器返回的请求结果响应给用户。</p><ul><li>反向代理是什么<ul><li>反向代理即对后方实际处理请求的业务服务器做代理，请求者无需知道最终是谁处理这个请求，只要将自己的请 求发送到代理服务器上，代理服务器会根据配置将这个请求发送到业务服务器，并将业务服务器返回的 数据传回给请求者。在整个过程中，用户不知道业务服务器是在哪里，有几台。<br><img src="/2020/06/22/Nginx/nginx/20191107135143571.png" alt="反向代理"></li></ul></li><li>反向代理作用<ol><li>业务隔离：反向代理能避免暴露真实的业务服务器，提高网络安全性。</li><li>缓存： 将服务器的响应缓存在自己的内存中，减少服务器的压力。</li><li>负载均衡：将用户请求根据配置好的策略，分配给多个服务器。</li><li>访问控制：反向代理服务器能够对请求做访问控制，防止无效或异常的请求被发送到业务服务器，减轻服务器压力。</li><li>安全防护：反向代理服务器能够通过配置防火墙、安装安全软件等方式，一定程度防护网络攻击。</li></ol></li></ul><h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h3><p>基于反向代理服务器，当用户访问量过大一台业务服务器撑不住时，可以部署多台相同服务的业务服务器，由Nginx可以根据配好的策略，将用户的访问分配到各个配好的服务器。</p><ul><li><strong>使用负载均衡的好处在于：</strong><ol><li>更高的并发量：<ul><li>Nginx代理服务器仅做转发的功能，不负责请求和响应的解析，业务逻辑十分简单，可以承载较大的并发量。而业务服务器往往耗时更久，同时多台并发处理能提高效率。</li></ul></li><li>更高的稳定性：<ul><li>业务服务器情况复杂，多台并发处理的话，若其中一台宕机，代理服务器能及时将请求分配到其他服器，降低对用户使用的影响。</li></ul></li><li>突破性能瓶颈：<ul><li>单机性能往往受到cpu、内存的限制，而通过负载均衡能够让多台服务器共同处理，这也是集群的基本构架。</li></ul></li><li>降低开发成本：<ul><li>高性能的服务器十分昂贵，通过负载均衡实现集群，能够将多台服务器联合在一起，花费更小的代价，达到甚至超过高性能服务器。</li></ul></li></ol></li></ul><h3 id="4-虚拟主机"><a href="#4-虚拟主机" class="headerlink" title="4. 虚拟主机"></a>4. 虚拟主机</h3><p> 有的网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。例如将<a href="http://www.aaa.com和http://www.bbb.com两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。" target="_blank" rel="noopener">http://www.aaa.com和http://www.bbb.com两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。</a></p><h2 id="三、Nginx的基本原理"><a href="#三、Nginx的基本原理" class="headerlink" title="三、Nginx的基本原理"></a>三、Nginx的基本原理</h2><ol><li>nginx高并发原理（ 多进程+epoll实现高并发 ）<ol><li>Nginx 在启动后，会有一个 master 进程和多个相互独立的 worker 进程。</li><li>每个子进程只有一个线程(协程)，采用的 IO多路复用模型epoll，实现高并发</li></ol></li><li>epoll能实现高并发原理<ol><li>epoll() 中内核则维护一个链表，epoll_wait 方法可以获取到链表长度，不为0就知道文件描述符准备好了。</li><li>在内核实现中 epoll 是根据每个 sockfd 上面的与设备驱动程序建立起来的回调函数实现的。</li><li>某个 sockfd 上的事件发生时，与它对应的回调函数就会被调用，来把这个 sockfd 加入链表，其他处于“空闲的”状态的则不会。</li><li>epoll上面链表中获取文件描述，这里使用内存映射（mmap）技术， 避免了复制大量文件描述符带来的开销</li></ol><strong>内存映射(mmap)：</strong>内存映射文件，是由一个文件到一块内存的映射，将不必再对文件执行I/O操作</li></ol><h2 id="四、Tomcat、Apache、Nginx对比选择"><a href="#四、Tomcat、Apache、Nginx对比选择" class="headerlink" title="四、Tomcat、Apache、Nginx对比选择"></a>四、Tomcat、Apache、Nginx对比选择</h2><h3 id="1、Tomcat、Apache、Nginx分别是什么"><a href="#1、Tomcat、Apache、Nginx分别是什么" class="headerlink" title="1、Tomcat、Apache、Nginx分别是什么"></a>1、Tomcat、Apache、Nginx分别是什么</h3><ul><li><p>Apache/Nginx 应该叫做「HTTP Server」；而 Tomcat 则是一个「Application Server」，或者更准确的来说，是一个「Servlet/JSP」应用的容器（Ruby/Python 等其他语言开发的应用也无法直接运行在 Tomcat 上）。即Apache和Nginx只能用于处理静态资源的访问，或是请求与转发。而Tomcat则是一个应用服务器，他可以动态处理和返回资源。，</p></li><li><p>一个 HTTP Server 关心的是 HTTP 协议层面的传输和访问控制，所以在 Apache/Nginx 上你可以看到代理、负载均衡等功能。客户端通过 HTTP Server 访问服务器上存储的资源（HTML 文件、图片文件等等）。通过 CGI 技术，也可以将处理过的内容通过 HTTP Server 分发，但是一个 HTTP Server 始终只是把服务器上的文件如实的通过 HTTP 协议传输给客户端。</p></li><li><p>而应用服务器，则是一个应用执行的容器。它首先需要支持开发语言的 Runtime（对于 Tomcat 来说，就是 Java），保证应用能够在应用服务器上正常运行。其次，需要支持应用相关的规范，例如类库、安全方面的特性。对于 Tomcat 来说，就是需要提供 JSP/Sevlet 运行需要的标准类库、Interface 等。为了方便，应用服务器往往也会集成 HTTP Server 的功能，但是不如专业的 HTTP Server 那么强大，所以应用服务器往往是运行在 HTTP Server 的背后，执行应用，将动态的内容转化为静态的内容之后，通过 HTTP Server 分发到客户端。</p></li></ul><h3 id="2、三者如何选择"><a href="#2、三者如何选择" class="headerlink" title="2、三者如何选择"></a>2、三者如何选择</h3><ul><li>动态请求：使用Tomcat，支持动态请求处理，Apache/Nginx只能处理静态文件，或做负载均衡进行转发，无法处理请求。动态请求如restApi请求。</li><li>高并发：使用Nginx，Nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能。且Nginx处理动态请求速度高于Apache。</li><li>稳定运行：使用Apache，模块多，少bug，运行稳定。</li><li>rewrite频繁: 使用Apache。rewrite即需要重写请求url的时候，由于不同的HTTP Server对请求的url的解析是不一样的。对于/index.php/abc这种url，Apache按”index.php?abc”来解释，而nginx会认为是请求名字是“index.php”的目录下的abc文件的内容。所以一些框架，如CI，在nginx下不配置rewrite是无法运行的，而在Apache则正常。</li></ul><h2 id="五、Nginx常用配置"><a href="#五、Nginx常用配置" class="headerlink" title="五、Nginx常用配置"></a>五、Nginx常用配置</h2><h3 id="1-nginx配置文件注释"><a href="#1-nginx配置文件注释" class="headerlink" title="1. nginx配置文件注释"></a>1. nginx配置文件注释</h3><details>    <summary><span style="color: white; background-color: red">nginx配置文件注释</span></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"> </span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"> </span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I&#x2F;O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"> </span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"> </span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients &#x3D; worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients &#x3D; worker_processes * worker_connections &#x2F; 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 &#x3D; 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"> </span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"> </span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I&#x2F;O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"> </span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"> </span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"> </span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"> </span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs&#x2F;nginx.access.log  main;</span><br><span class="line"> </span><br><span class="line">        #默认请求</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^&#x2F;(images|javascript|js|css|flash|media|static)&#x2F; &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ &#x2F;.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="2-nginx配置举例"><a href="#2-nginx配置举例" class="headerlink" title="2. nginx配置举例"></a>2. nginx配置举例</h3><details>    <summary><span style="color: white; background-color: black">nginx/conf/nginx.conf 主配置文件</span></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">user  work;</span><br><span class="line">worker_processes 8;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">error_log  logs&#x2F;error.log warn;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># load modules compiled as Dynamic Shared Object (DSO)</span><br><span class="line">#</span><br><span class="line">#dso &#123;</span><br><span class="line">#    load ngx_http_fastcgi_module.so;</span><br><span class="line">#    load ngx_http_rewrite_module.so;</span><br><span class="line">#&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush      on;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    fastcgi_connect_timeout 5;</span><br><span class="line">    fastcgi_send_timeout 10;</span><br><span class="line">    fastcgi_read_timeout 10;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  60;</span><br><span class="line">    keepalive_requests 1024;</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line">    large_client_header_buffers 4 32k;</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">    client_body_buffer_size 512k;</span><br><span class="line">    client_body_timeout 600;</span><br><span class="line">    client_header_timeout 600;</span><br><span class="line">    send_timeout 600;</span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout   1000ms;</span><br><span class="line">    proxy_send_timeout      2000000ms;</span><br><span class="line">    proxy_read_timeout      2000000ms;</span><br><span class="line">    proxy_buffers           64 8k;</span><br><span class="line">    proxy_busy_buffers_size    128k;</span><br><span class="line">    proxy_temp_file_write_size 64k;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    #proxy_next_upstream off ;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    add_header X-Frame-Options &quot;ALLOW-FROM  http:&#x2F;&#x2F;cloud.njsig.cn&quot;;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Real-Port $remote_port;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_cookie&quot; &quot;$http_user_agent&quot; &#39;</span><br><span class="line">        &#39;$request_time $remote_addr $server_addr $upstream_addr $host &#39;</span><br><span class="line">        &#39;&quot;$http_x_forwarded_for&quot; $upstream_response_time&#39;;</span><br><span class="line"></span><br><span class="line">    set_real_ip_from 10.0.0.0&#x2F;8;</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line"></span><br><span class="line">    #example</span><br><span class="line">#     server &#123;</span><br><span class="line">#        listen 8000;</span><br><span class="line">#        server_name www;</span><br><span class="line">#        access_log logs&#x2F;access.log  main;</span><br><span class="line">#        location &#x2F; &#123;</span><br><span class="line">#            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8001;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#      &#125;</span><br><span class="line">    include vhosts&#x2F;*.conf;</span><br><span class="line">    &#125;</span><br><span class="line">#####</span><br></pre></td></tr></table></figure></details><details>    <summary><span style="color: white; background-color: black">nginx/conf/vhosts/opwf.conf django项目简单配置</span></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name aaa.test.com bbb.test.com;</span><br><span class="line">        access_log  &#x2F;home&#x2F;work&#x2F;nginx&#x2F;logs&#x2F;opwf_access.log main;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8001;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary><span style="color: white; background-color: black">nginx/conf/vhosts/vue.conf VUE项目简单配置</span></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name ccc.test.com;</span><br><span class="line">        access_log  &#x2F;home&#x2F;work&#x2F;nginx&#x2F;logs&#x2F;nj1_access.log main;</span><br><span class="line">        root &#x2F;home&#x2F;work&#x2F;project&#x2F;frontopwf&#x2F;dist;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                try_files $uri $uri&#x2F; @router;</span><br><span class="line">        &#125;</span><br><span class="line">        location @router &#123;</span><br><span class="line">                rewrite ^.*$ &#x2F;index.html last;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="六、Nginx支持的负载均衡调度算法方式"><a href="#六、Nginx支持的负载均衡调度算法方式" class="headerlink" title="六、Nginx支持的负载均衡调度算法方式"></a>六、Nginx支持的负载均衡调度算法方式</h2><h3 id="1-搭建实验环境（使用docker部署两台nginx容器）"><a href="#1-搭建实验环境（使用docker部署两台nginx容器）" class="headerlink" title="1. 搭建实验环境（使用docker部署两台nginx容器）"></a>1. 搭建实验环境（使用docker部署两台nginx容器）</h3><p>1) 使用搭建第一台nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node4 ~]# docker container run -d --name web01 -p 81:80 nginx</span><br><span class="line">测试访问：http://192.168.56.14:81/</span><br><span class="line">root@c58a7f1fb89d:/# docker exec -it web01 bash</span><br><span class="line">root@c58a7f1fb89d:/# echo web01 &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>2) 使用docker搭建第二台nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node4 ~]# docker container run -d --name web02 -p 82:80 nginx</span><br><span class="line">测试访问：http://192.168.56.14:82/</span><br><span class="line">root@a3440d30f27c:/#  docker exec -it web02 bash</span><br><span class="line">root@a3440d30f27c:/#  echo web02 &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><h3 id="2-法1：默认轮训（在真实主机中安装nginx并配置负载均衡"><a href="#2-法1：默认轮训（在真实主机中安装nginx并配置负载均衡" class="headerlink" title="2. 法1：默认轮训（在真实主机中安装nginx并配置负载均衡)"></a>2. 法1：默认轮训（在真实主机中安装nginx并配置负载均衡)</h3><p><span style="color: red">轮训：</span>个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node4 ~]# yum -y install nginx</span><br><span class="line">[root@linux-node4 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">#### 修改nginx.conf 默认是轮训 ####</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"># 1. upstream是自己写的，一定要放在server外面</span><br><span class="line">upstream myservers &#123;</span><br><span class="line">    server 192.168.56.14:81;</span><br><span class="line">    server 192.168.56.14:82;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 2. server其实默认已经有一个，只需要修改location中配置，指定转发代理即可</span><br><span class="line">server &#123;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">       proxy_pass http:&#x2F;&#x2F;myservers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[root@linux-node4 nginx]# systemctl start nginx</span><br></pre></td></tr></table></figure><h3 id="3-五种负载常用配置梳理"><a href="#3-五种负载常用配置梳理" class="headerlink" title="3. 五种负载常用配置梳理"></a>3. 五种负载常用配置梳理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1、轮询（默认）</span><br><span class="line">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    server 192.168.0.14;</span><br><span class="line">    server 192.168.0.15;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2、权重 weight</span><br><span class="line">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    server 192.168.0.14 weight&#x3D;3;</span><br><span class="line">    server 192.168.0.15 weight&#x3D;7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、ip_hash（ IP绑定）</span><br><span class="line">上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，</span><br><span class="line">每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。</span><br><span class="line">我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。</span><br><span class="line">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.0.14:88;</span><br><span class="line">    server 192.168.0.15:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4、fair（第三方插件）</span><br><span class="line">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    server server1;</span><br><span class="line">    server server2;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">5、url_hash（第三方插件）</span><br><span class="line">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    server squid1:3128;</span><br><span class="line">    server squid2:3128;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考博文：<br><a href="https://blog.csdn.net/qq_34416331/java/article/details/102948322" target="_blank" rel="noopener">https://blog.csdn.net/qq_34416331/java/article/details/102948322</a><br><a href="https://www.cnblogs.com/xiaonq/p/10468998.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaonq/p/10468998.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰器迭代器生成器</title>
      <link href="/2020/05/09/Python/Three_devices/"/>
      <url>/2020/05/09/Python/Three_devices/</url>
      
        <content type="html"><![CDATA[<h2 id="1-装饰器"><a href="#1-装饰器" class="headerlink" title="1. 装饰器"></a>1. 装饰器</h2><h3 id="1-装饰器的作用"><a href="#1-装饰器的作用" class="headerlink" title="1. 装饰器的作用"></a>1. 装饰器的作用</h3><ol><li>什么是装饰器<ul><li>本质是函数（装饰其他函数）， 在不改变原函数的情况下在运行前或运行后添加新的功能</li></ul></li><li>装饰器不许准寻的原则：<ol><li>不能修改被装饰函数的源代码</li><li>不能修改被装饰函数的调用方式</li></ol></li><li>实现装饰器知识储备<ol><li>函数即”变量”</li><li>高阶函数</li><li>嵌套函数 高阶函数+嵌套函数 =&gt; 装饰器</li></ol></li></ol><h3 id="2-使用高阶函数模仿装饰器功能"><a href="#2-使用高阶函数模仿装饰器功能" class="headerlink" title="2. 使用高阶函数模仿装饰器功能"></a>2. 使用高阶函数模仿装饰器功能</h3><ol><li>定义：把一个函数名当做实参传给另一个函数</li><li>返回之中包含函数名</li><li>下面使用高阶函数虽然可以实现装饰器的一些功能，但是违反了装饰器不能改变调用方式的原则，以前使用bar()现在将调用方式改编成了test1(bar)就是将bar的函数名当做变量传给了test1()<details> <summary>改变了调用的方式</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    func()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'函数执行时间为'</span>, time.time() - start_time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'开始执行test'</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'test执行结束'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timer(test)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">开始执行test</span></span><br><span class="line"><span class="string">test执行结束</span></span><br><span class="line"><span class="string">函数执行时间为 3.00332999229</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></details></li><li>高阶函数——不修改高阶函数的调用方式增加新的功能（但是无法传参数）<br>注：bar = test2(bar) 等价于：@timer重新将函数名bar赋值，将原函数bar的内存地址当做实参传递该函数test2()，再将test2()赋值给bar<details> <summary>不改变调用方式</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"in the bar"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line">bar = test2(bar)</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></details></li><li>嵌套函数<ul><li>嵌套函数：在一个函数中嵌套另一个函数，并在函数内部调用<details><summary>嵌套函数</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in the foo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"in the bar"</span>)</span><br><span class="line">    bar()</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></details></li></ul></li></ol><h3 id="3-装饰器的分类"><a href="#3-装饰器的分类" class="headerlink" title="3. 装饰器的分类"></a>3. 装饰器的分类</h3><ol><li><p>没有参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">      f = func() + <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@demo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(test())  <span class="comment"># 结果为2</span></span><br></pre></td></tr></table></figure></li><li><p>带参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">      f = func(*args, **kwargs) + <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@demo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">print(test(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 结果为4</span></span><br></pre></td></tr></table></figure></li><li><p>三层装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(auth_type)</span>:</span></span><br><span class="line">    print(<span class="string">"auth func:"</span>,auth_type)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"wrapper func args:"</span>, *args, **kwargs)</span><br><span class="line">            print(<span class="string">'运行前'</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">'运行后'</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outer_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(auth_type="local") # home = wrapper()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"welcome to home  page"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"from home"</span></span><br><span class="line">home()</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-使用闭包实现装饰器功能"><a href="#4-使用闭包实现装饰器功能" class="headerlink" title="4. 使用闭包实现装饰器功能"></a>4. 使用闭包实现装饰器功能</h3><p>1）闭包概念</p><ol><li>在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用，这样就构成了一个闭包</li><li>一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。</li><li>但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span>                    <span class="comment">#timer(test1)  func=test1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(*args,**kwargs)</span>:</span>       <span class="comment"># # 函数嵌套</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args,**kwargs)        <span class="comment"># 跨域访问，引用了外部变量func   (func实质是函数内存地址)</span></span><br><span class="line">        stop_time = time.time()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"running time is %s"</span>%(stop_time-start_time)</span><br><span class="line">    <span class="keyword">return</span> deco                    <span class="comment"># 内层函数作为外层函数返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"in the test2"</span>,name</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">test = timer(test)   <span class="comment"># 等价于 ==》 @timer语法糖</span></span><br><span class="line">test(<span class="string">"tom"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">in the test2 tom</span></span><br><span class="line"><span class="string">running time is 2.00302696228</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>2）python装饰器补充之functools包中的wraps</strong></p><ol><li>Python被装饰函数其实已经是另外一个函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(view_func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''test1...'''</span></span><br><span class="line">    print(<span class="string">'test1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (test1.__name__)   <span class="comment"># 结果：wrapper  (标识test1函数已经变成wrapper函数了)</span></span><br></pre></td></tr></table></figure></li><li>使用functools的wrap，它能保留原有函数的名称<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(view_func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(view_func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''test1...'''</span></span><br><span class="line">    print(<span class="string">'test1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (test1.__name__)   <span class="comment"># 结果：test1  (解决了改变函数的问题，能保留原有函数的名称)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-装饰器场景应用场景"><a href="#5-装饰器场景应用场景" class="headerlink" title="5. 装饰器场景应用场景"></a>5. 装饰器场景应用场景</h3><ol><li><p>身份认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user,passwd = <span class="string">'aaa'</span>,<span class="string">'123'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(username,password,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> user == username <span class="keyword">and</span> password == passwd:</span><br><span class="line">            print(<span class="string">"User has passed authentication"</span>)</span><br><span class="line">            res = func(username,password,*args,**kwargs)   <span class="comment">#这里执行func()相当于执行调用的函数如home()</span></span><br><span class="line">            <span class="keyword">return</span> res          <span class="comment">#为了获得home()函数返回值，可以将执行结果赋值给res然后返回print(home())结果是"from home"而不是"None"了</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"非合法用户"</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    print(<span class="string">"welcome to home page"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"from home"</span></span><br><span class="line"></span><br><span class="line">home(<span class="string">'aaa'</span>,<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure></li><li><p>记录日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decoratore</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">"当前运行方法"</span>,func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(traceback.format_exc())  <span class="comment"># 这里应该调用log模块来记录到日志里</span></span><br><span class="line">    <span class="keyword">return</span> log</span><br><span class="line"></span><br><span class="line"><span class="meta">@decoratore</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    int(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br><span class="line">    </span><br><span class="line">    <span class="string">''' 上面运行结果</span></span><br><span class="line"><span class="string">    当前运行方法 test</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 11, in log</span></span><br><span class="line"><span class="string">        return func(*args,**kwargs)</span></span><br><span class="line"><span class="string">      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 18, in test</span></span><br><span class="line"><span class="string">        int('a')</span></span><br><span class="line"><span class="string">    ValueError: invalid literal for int() with base 10: 'a'</span></span><br><span class="line"><span class="string">     22222</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure></li><li><p>redis缓存操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步：查询redis缓存是否存在这个key</span><br><span class="line">第二步：如果存在这个key，不用去mysql中查询，直接从redis中取出数据即可（减轻了mysql压力）</span><br><span class="line">第三步：如果查询的key不存在，先到mysql中查询数据，让后设置到redis中，下次查询就有了</span><br></pre></td></tr></table></figure><p>2B青年每一个需要使用缓存的数据，我都写一个方法获取数据，再写一个方法处理缓存。<br>若需要用到缓存的地方越来越多，每一个都需要这么写一套代码，代码冗余繁琐。</p></li></ol><ul><li><p>2B青年操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取readed缓存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_readed_cache</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 判断键是否存在</span></span><br><span class="line">    key = <span class="string">'readed'</span></span><br><span class="line">    <span class="keyword">if</span> cache.has_key(key):</span><br><span class="line">        data = cache.get(key)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 不存在，则通过sql语句获取数据，并写入缓存,这里只是一个举例的sql语句</span></span><br><span class="line">        data = <span class="string">"select name from tb"</span></span><br><span class="line">        <span class="comment"># 写入缓存</span></span><br><span class="line">        cache.set(key, data, <span class="number">3600</span> - int(time.time() % <span class="number">3600</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    data = get_readed_cache()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    data = get_readed_cache()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br></pre></td></tr></table></figure></li><li><p>NB青年可以使用三级装饰器，在装饰器中判断key如果存在就从reids中获取，如果不存在就从数据库查询，并设置到reids中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取redis缓存的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_cache</span><span class="params">(key, timeout)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__redis_cache</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">warpper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> cache.has_key(key):  <span class="comment"># 判断缓存是否存在</span></span><br><span class="line">                data = cache.get(key)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 若不存在则执行获取数据的方法</span></span><br><span class="line">                <span class="comment"># 注意返回数据的类型(字符串，数字，字典，列表均可)</span></span><br><span class="line">                data = func(*args, **kw)   <span class="comment"># 从数据库查询到数据设置到redis中</span></span><br><span class="line">                cache.set(key, data, timeout)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">return</span> warpper</span><br><span class="line">    <span class="keyword">return</span> __redis_cache</span><br><span class="line"></span><br><span class="line"><span class="comment">#键值为test，超时时间为60秒</span></span><br><span class="line"><span class="meta">@redis_cache('test', 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取Blog模型随机排序前3条数据</span></span><br><span class="line">    <span class="comment"># (Blog模型是我自己的模型，具体代码根据自己需求获取数据)</span></span><br><span class="line">    <span class="comment"># values执行结果，将返回一个字典。字典可以直接存入redis</span></span><br><span class="line">    <span class="comment"># data = Blog.objects.values('id', 'caption').order_by('?')[:3]</span></span><br><span class="line">    data = <span class="string">'从数据库查询到了数据'</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_test_data()</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2. 迭代器"></a>2. 迭代器</h2><p><strong>定义：</strong>迭代器是访问集合内元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素都被访问一遍后结束。</p><ol><li><p>迭代器和可迭代对象</p><ol><li>凡是可作用于for循环的对象都是可迭代的（Iterable）类型；</li><li>凡是可作用于next()函数的对象都是迭代器（Iterator）类型，它们表示一个惰性计算的序列；</li><li>集合数据类型如list、dict、str等是可迭代的但不是迭代器，不过可以通过iter()函数获得一个Iterator对象。</li><li>Python的for循环本质上就是通过不断调用next()函数实现的<br>总结：一个实现了<strong>iter</strong>方法的对象是可迭代的，一个实现next方法的对象是迭代器</li></ol></li><li><p>迭代器的两个方法</p><ol><li>迭代器仅是一容器对象，它实现了迭代器协议。它有两个基本方法<ol><li><strong>next</strong>方法<ul><li>返回容器的下一个元素</li></ul></li><li><strong>iter</strong>方法<ul><li>返回迭代器本身</li></ul></li></ol></li><li>迭代器是访问集合内元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素都被访问一遍后结束。</li><li><strong>iter</strong>方法会返回一个迭代器(iterator)，所谓的迭代器就是具有next方法的对象。</li><li>在调用next方法时，迭代器会返回它的下一个值，如果next方法被调用，但迭代器中没有值可以返就会引发一个StopIteration异常<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = iter([<span class="number">1</span>,<span class="number">2</span>,])              <span class="comment">#生成一个迭代器</span></span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())           <span class="comment">#在这一步会引发  “StopIteration” 的异常</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断是迭代器和可迭代对象<br><strong>注：</strong>列表，元组，字典是可迭代的但不是迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">print(isinstance([],Iterable))                               <span class="comment">#True</span></span><br><span class="line">print(isinstance(&#123;&#125;,Iterable))                               <span class="comment">#True</span></span><br><span class="line">print(isinstance((),Iterable))                               <span class="comment">#True</span></span><br><span class="line">print(isinstance(<span class="string">"aaa"</span>,Iterable))                           <span class="comment">#True</span></span><br><span class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)),Iterable))          <span class="comment">#True</span></span><br></pre></td></tr></table></figure></li><li><p>列表不是迭代器，只有生成器是迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(isinstance(t,Iterator))           <span class="comment">#False</span></span><br><span class="line">t1 = iter(t)</span><br><span class="line">print(isinstance(t1,Iterator))          <span class="comment">#True</span></span><br></pre></td></tr></table></figure></li><li><p>自定义迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRange</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.idx = <span class="number">0</span></span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.idx &lt; self.n:</span><br><span class="line">            val = self.idx</span><br><span class="line">            self.idx += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.n[val]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">obj = MyRange(l)</span><br><span class="line"><span class="keyword">print</span> obj.next()      <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">print</span> obj.next()      <span class="comment"># 5</span></span><br><span class="line"><span class="keyword">print</span> obj.next()      <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li><li><p>迭代器与生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]                  <span class="comment"># 列表是一个可迭代对象，不是一个迭代器</span></span><br><span class="line"><span class="keyword">print</span> dir(l)                     <span class="comment"># 所以 l 中有 __iter__() 方法，没有 __next__()方法</span></span><br><span class="line">iter_obj = l.__iter__()          <span class="comment"># __iter__()方法返回迭代器对象本身(这个迭代器对象就会有 next 方法了)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'###################################\n'</span></span><br><span class="line"><span class="keyword">print</span> iter_obj.next()     <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">print</span> iter_obj.next()     <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">print</span> iter_obj.next()     <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-生成器"><a href="#3-生成器" class="headerlink" title="3. 生成器"></a>3. 生成器</h2><p><strong>定义：</strong><br>    1、生成器，即生成一个容器<br>    2、在python中，一边循环，一边计算的机制，称为生成器<br>    3、生成器可以理解为一种数据类型，这种数据类型自动实现了迭代器协议（其他数据类型需要调用自己的内置iter（）方法或<strong>iter</strong>()的内置函数），所以，生成器就是一个可迭代对象。</p><ol><li><p>生成器的作用</p><ol><li>通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的</li><li>而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</li><li>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？</li><li>这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</li><li>要创建一个generator，有很多种方法，第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print( [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] )             <span class="comment">#列表生成式： [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class="line">print( (i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)) )             <span class="comment">#生  成  器： &lt;generator object &lt;genexpr&gt; at 0x005A3690&gt;</span></span><br></pre></td></tr></table></figure></li><li>我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？</li><li>如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print( g.__next__() )               <span class="comment"># 0</span></span><br><span class="line">print( g.__next__() )               <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>生成器工作原理</p><ol><li>生成器是这样一个函数，它记住上一次返回时在函数体中的位置。</li><li>对生成器函数的第二次（或第 n 次）调用跳转至该函数中间，而上次调用的所有局部变量都保持不变。</li><li>生成器不仅“记住”了它数据状态；生成器还“记住”了它在流控制构造（在命令式编程中，这种构造不只是数据值）中的位置。</li><li>生成器是一个函数，而且函数的参数都会保留。</li><li>迭代到下一次的调用时，所使用的参数都是第一次所保留下的，即是说，在整个所有函数调用的参数都是第一次所调用时保留的，而不是新创建的</li></ol></li><li><p>yield生成器运行机制</p><ol><li>在Python中，yield就是这样的一个生成器。</li><li>当你问生成器要一个数时，生成器会执行，直至出现 yield 语句，生成器把yield 的参数给你，之后生成器就不会往下继续运行。</li><li>当你问他要下一个数时，他会从上次的状态开始运行，直至出现yield语句，把参数给你，之后停下。如此反复</li><li>在python中，当你定义一个函数，使用了yield关键字时，这个函数就是一个生成器</li><li>它的执行会和其他普通的函数有很多不同，函数返回的是一个对象，而不是你平常所用return语句那样，能得到结果值。如果想取得值，那得调用next()函数</li><li>每当调用一次迭代器的next函数，生成器函数运行到yield之处，返回yield后面的值且在这个地方暂停，所有的状态都会被保持住，直到下次next函数被调用，或者碰到异常循环退出。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max_num)</span>:</span></span><br><span class="line">    a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; max_num:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b</span><br><span class="line"></span><br><span class="line">g = fib(<span class="number">10</span>)               <span class="comment">#生成一个生成器：[1，2, 3, 5, 8, 13]</span></span><br><span class="line">print(g.__next__())       <span class="comment">#第一次调用返回：1</span></span><br><span class="line">print(list(g))            <span class="comment">#把剩下元素变成列表：[2, 3, 5, 8, 13]</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>yield实现单线程下的并发效果</p></li><li><p>yield相当于 return 返回一个值，并且记住这个返回的位置，下次迭代时，代码从yield的下一条语句开始执行。</p></li><li><p>send() 和next()一样，都能让生成器继续往下走一步（下次遇到yield停），但send()能传一个值，这个值作为yield表达式整体的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"%s 准备吃包子啦!"</span> %name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       baozi = <span class="keyword">yield</span></span><br><span class="line">       print(<span class="string">"包子[%s]来了,被[%s]吃了!"</span> %(baozi,name))</span><br><span class="line">c = consumer(<span class="string">"Tom"</span>)</span><br><span class="line">c.__next__()</span><br><span class="line">b1 = <span class="string">"韭菜馅包子"</span></span><br><span class="line">c.send(b1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c.send(b1)作用：</span></span><br><span class="line"><span class="comment"># c.send()的作用是给yied的传递一个值，并且每次调用c.send()的同时自动调用一次__next__</span></span><br><span class="line"><span class="string">'''运行结果：</span></span><br><span class="line"><span class="string">Tom 准备吃包子啦!</span></span><br><span class="line"><span class="string">包子[韭菜馅包子]来了,被[Tom]吃了!</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ol><p>参考博客：<a href="https://www.cnblogs.com/xiaonq/p/7864932.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaonq/p/7864932.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/04/hello-world/"/>
      <url>/2020/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2020/05/03/hexo/"/>
      <url>/2020/05/03/hexo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://molunerfinn.com/hexo-theme-melody-doc/" target="_blank" rel="noopener">参照melody主题官方文档</a></p><h1 id="1-快速开始"><a href="#1-快速开始" class="headerlink" title="1. 快速开始"></a>1. 快速开始</h1><p>查找您的hexo工作文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;Molunerfinn&#x2F;hexo-theme-melody themes&#x2F;melody</span><br></pre></td></tr></table></figure><hr><h1 id="2-特殊功能"><a href="#2-特殊功能" class="headerlink" title="2. 特殊功能"></a>2. 特殊功能</h1><h2 id="1-折叠代码块"><a href="#1-折叠代码块" class="headerlink" title="1. 折叠代码块"></a>1. 折叠代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;这是折叠代码块的标题&lt;&#x2F;summary&gt;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">这是代码块的内容一</span><br><span class="line">这是代码块的内容二</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><details>    <summary>这是折叠代码块的标题</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是代码块的内容一</span><br><span class="line">这是代码块的内容二</span><br></pre></td></tr></table></figure></details><h2 id="2-hexo添加图片配置"><a href="#2-hexo添加图片配置" class="headerlink" title="2. hexo添加图片配置"></a>2. hexo添加图片配置</h2><p>安装图片插件(以下皆可)：</p><ul><li><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></li><li><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li></ul><p>插入图片的几种方法：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>![<span class="string">img</span>](<span class="link">celery/celery.jpg "celery流程"</span>)</span><br><span class="line"><span class="bullet">2. </span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"celery/celery.jpg"</span> <span class="attr">width</span>=<span class="string">100px</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">title</span>=<span class="string">"celery流程"</span>&gt;</span></span></span><br><span class="line"><span class="bullet">3. </span>&#123;% asset_img test.jpg This is an test image %&#125;</span><br><span class="line">其中test.jpg就是你要引用的图片，我这里就是test.jpg，后面的This is an test image是图片描述，可以自己修改。</span><br></pre></td></tr></table></figure><hr><h1 id="3-主题页"><a href="#3-主题页" class="headerlink" title="3. 主题页"></a>3. 主题页</h1><h2 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h2><ol><li>进入您的hexo博客根文件夹。</li><li>类型 <code>hexo new page tags</code></li><li>你会找到 <code>source/tags/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><ol><li>进入您的hexo博客根文件夹。</li><li>类型 <code>hexo new page categories</code></li><li>你会找到 <code>source/categories/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-创建幻彩灯界面"><a href="#3-创建幻彩灯界面" class="headerlink" title="3. 创建幻彩灯界面"></a>3. 创建幻彩灯界面</h2><ol><li>进入您的hexo博客根文件夹</li><li>类型 <code>hexo new page slides</code></li><li>你会找到 <code>source/slides/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Slides </span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "slides"</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-幻彩灯"><a href="#4-幻彩灯" class="headerlink" title="4. 幻彩灯"></a>4. 幻彩灯</h2><p>幻灯片页面可让您使用Reveal.js编写markdown和输出，以制作漂亮的幻灯片页面。<br><strong>设置 melody.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">slide:</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">---</span></span><br><span class="line">  <span class="attr">separator_vertical:</span> <span class="string">--</span></span><br><span class="line">  <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">black</span></span><br><span class="line">  <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">mouseWheel:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="string">slide</span></span><br><span class="line">  <span class="attr">transitionSpeed:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">parallaxBackgroundImage:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">parallaxBackgroundSize:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">parallaxBackgroundHorizontal:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">parallaxBackgroundVertical:</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><blockquote><p>有关Reveal.js的配置，请参见<a href="https://github.com/hakimel/reveal.js#configuration" target="_blank" rel="noopener">https://github.com/hakimel/reveal.js#configuration</a></p></blockquote><h2 id="5-使用幻彩片布局创建帖子"><a href="#5-使用幻彩片布局创建帖子" class="headerlink" title="5. 使用幻彩片布局创建帖子"></a>5. 使用幻彩片布局创建帖子</h2><p>只需md照常创建一个文件。<code>layout: slides</code>在hexo post文件的中添加一个称为的属性front matter</p><blockquote><p>您还可以slide通过在发布文件的中添加幻灯片选项来设置具有特定配置的幻灯片页面front matter。</p></blockquote><details>    <summary>特定配置的幻灯片页面</summary><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo-theme-melody v1.5 supports slides &amp; iframe</span><br><span class="line">date: 2018-03-06 19:57:52</span><br><span class="line">tags: hexo</span><br><span class="line">layout: slides</span><br><span class="line">slide:</span><br><span class="line">  theme: night</span><br><span class="line">  separator: ===</span><br><span class="line">  separator_vertical: ==</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">### hexo-theme-melody &lt;small&gt;v1.5&lt;/small&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- .slide: data-background="#49B1F5" --&gt;</span></span></span><br><span class="line"></span><br><span class="line">Supports iframe &amp; slides. You can use a layout called <span class="code">`slides`</span> to enabled the slides layout.</span><br><span class="line"></span><br><span class="line">Also you can add a <span class="code">`iframe`</span> front-matter with the <span class="code">`slides`</span> layout in your <span class="code">`md`</span> file to enable the iframe page.</span><br><span class="line"></span><br><span class="line"><span class="section">### Steps</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- .slide: data-transition="concave" data-background="#C7916B" --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 1. Add a slides page</span></span><br><span class="line"></span><br><span class="line">// ......</span><br><span class="line"></span><br><span class="line">==</span><br><span class="line"></span><br><span class="line">// ......</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"></span><br><span class="line"><span class="section">#### 2. Add the layout type</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- .slide: data-transition="fade" data-background="#00C4B6" --&gt;</span></span></span><br><span class="line"></span><br><span class="line">// ......</span><br></pre></td></tr></table></figure></details><h2 id="6-使用iframe界面创建帖子"><a href="#6-使用iframe界面创建帖子" class="headerlink" title="6. 使用iframe界面创建帖子"></a>6. 使用iframe界面创建帖子</h2><p>如果要在iframe中添加所需的网站，请尝试以下操作(布局必须为幻彩灯)：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: hexo-theme-melody v1.5 supports iframe &amp; slides</span><br><span class="line">date: 2018-03-06 19:57:52</span><br><span class="line">layout: slides</span><br><span class="line">iframe: https://the-url-whatever-you-like</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="7-图库"><a href="#7-图库" class="headerlink" title="7. 图库"></a>7. 图库</h2><ol><li>进入您的hexo博客根文件夹。</li><li>类型 <code>hexo new page gallery</code></li><li>你会找到 <code>source/gallery/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Gallery </span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "gallery"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>然后主题旋律支持gallery为您命名的标记，以gallery-item在markdown文件中创建。</li></ol><p>修改source/gallery/index.md您之前创建的gallery标签，添加标签。</p><details>    <summary>例如</summary><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Gallery </span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "gallery"</span><br><span class="line">---</span><br><span class="line">&#123;% gallery img-url [title] %&#125;</span><br><span class="line">&#123;% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse melody %&#125;</span><br><span class="line">&#123;% gallery https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png background %&#125;</span><br><span class="line">&#123;% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b demo1 %&#125;</span><br><span class="line">&#123;% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq demo2 %&#125;</span><br><span class="line">&#123;% gallery https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic demo3 %&#125;</span><br><span class="line">&#123;% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd %&#125;</span><br></pre></td></tr></table></figure></details><h2 id="8-404界面"><a href="#8-404界面" class="headerlink" title="8. 404界面"></a>8. 404界面</h2><ol><li>进入您的hexo博客根文件夹。</li><li>类型 <code>hexo new page 404</code></li><li>你会找到 <code>source/404/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2019-10-13 15:49:05</span><br><span class="line">layout: 404</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4. 主题配置"></a>4. 主题配置</h1><h2 id="1-语言"><a href="#1-语言" class="headerlink" title="1. 语言"></a>1. 语言</h2><p>设置根<code>_config.yml</code>，而不是根<code>melody.yml</code>！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">en</span>    <span class="comment"># 还有default和zh-Hans，可自由设置</span></span><br></pre></td></tr></table></figure><h2 id="2-代码自动换行"><a href="#2-代码自动换行" class="headerlink" title="2. 代码自动换行"></a>2. 代码自动换行</h2><p>默认情况下，<code>hexo-highlight</code>以长行生成代码。如果您不想在代码区域中使用滚动条，则可以启用此功能。</p><p>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>找到根 <code>_config.yml</code>，将<code>line_number</code>改为<code>false</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- change this</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><h2 id="3-菜单"><a href="#3-菜单" class="headerlink" title="3. 菜单"></a>3. 菜单</h2><p>在右上方区域中，有导航菜单项。HEXO有默认路径/和/archives。如果要添加更多菜单项，例如标签和类别，请遵循以下步骤：</p><ol><li>进入您的hexo博客根文件夹。</li><li>类型 <code>hexo new page tags</code></li><li>你会找到 <code>source/tags/index.md</code></li><li>修改 <code>index.md</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>然后设置 <code>melody.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-顶图"><a href="#4-顶图" class="headerlink" title="4. 顶图"></a>4. 顶图</h2><p><code>Top Img</code>是<code>theme-melody</code>最神奇的选择。它可以具有<code>true</code>或<code>false</code>或<code>specific img url</code>值。</p><p>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">top_img:</span> <span class="literal">true</span>    <span class="comment"># 索引网站界面图片和帖子界面图片都显示默认</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="literal">false</span>  <span class="comment"># 索引网站界面图片显示默认，帖子界面图片不显示</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">https://xxxxx.jpg</span>  <span class="comment"># 索引网站界面图片和帖子界面图片显示xxxxx.jpg</span></span><br></pre></td></tr></table></figure><p>设置特定后置项目的自身top-img, 只需top_img在特定md文件的帖子标题中添加＆网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hi, theme-melody!</span><br><span class="line">tags:</span><br><span class="line">  - hexo</span><br><span class="line">  - hexo theme</span><br><span class="line">top_img: https:&#x2F;&#x2F;xxxxxxx.jpg   # &lt; add top_img to here</span><br><span class="line">date: 2017-09-07</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="5-侧边栏设置"><a href="#5-侧边栏设置" class="headerlink" title="5. 侧边栏设置"></a>5. 侧边栏设置</h2><p>由于<code>v1.7.0</code>，您可以将设置<code>melody.yml</code>为控制边栏以自动显示或不显示在特定页面中。默认<code>sidebar_display</code>值为<code>post</code>，这意味着侧栏将自动显示在帖子页面中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar_display:</span> <span class="string">all</span>    <span class="comment"># 所有页面都会自动显示侧边栏</span></span><br><span class="line"><span class="attr">sidebar_display:</span> <span class="string">index</span>  <span class="comment"># 仅索引页面会自动显示侧边栏</span></span><br><span class="line"><span class="attr">sidebar_display:</span> <span class="string">post</span>  <span class="comment"># 仅帖子页面会自动显示侧边栏</span></span><br><span class="line"><span class="attr">sidebar_display:</span> <span class="string">index-none</span>  <span class="comment"># 仅索引页面不会自动显示侧边栏</span></span><br><span class="line"><span class="attr">sidebar_display:</span> <span class="string">post-none</span>  <span class="comment"># 仅帖子页面不会自动显示侧边栏</span></span><br><span class="line"><span class="attr">sidebar_display:</span> <span class="string">phidden</span>  <span class="comment"># 所有页面不会自动显示侧边栏</span></span><br></pre></td></tr></table></figure><h2 id="6-头像"><a href="#6-头像" class="headerlink" title="6. 头像"></a>6. 头像</h2><p>设置<code>melody.yml</code>。请选择长度和宽度相等的图像。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">https://xxxx.jpg</span></span><br></pre></td></tr></table></figure><h2 id="7-跟着我"><a href="#7-跟着我" class="headerlink" title="7. 跟着我"></a>7. 跟着我</h2><p>设置<code>melody.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">follow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">'https://github.com/USERNAME'</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">'Follow Me'</span></span><br></pre></td></tr></table></figure><h2 id="8-友情链接"><a href="#8-友情链接" class="headerlink" title="8. 友情链接"></a>8. 友情链接</h2><p>在边栏中，您可以设置一些指向您的朋友或某些网页的链接。格式为<code>name: url</code><br>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span>   <span class="comment"># Set the links title</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">https://url.com</span></span><br></pre></td></tr></table></figure><h2 id="9-Toc"><a href="#9-Toc" class="headerlink" title="9. Toc"></a>9. Toc</h2><p>您可以为自己的帖子提供目录目录。它在边栏中，并且将根据您的滚动顶部自动扩展标题。<br>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示帖子目录</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span> <span class="comment"># v1.5.6版本后，是否显示目录列表编号</span></span><br></pre></td></tr></table></figure><p>设置特定后项的自身toc编号</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hi, theme-melody!</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  - </span>hexo</span><br><span class="line"><span class="bullet">  - </span>hexo theme</span><br><span class="line">toc_number: false   # 之后，您的特定帖子将拥有自己的顶数控件，而不是主题toc-number值</span><br><span class="line">date: 2017-09-07</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="10-Since"><a href="#10-Since" class="headerlink" title="10. Since"></a>10. Since</h2><p><code>Since</code>是向人们显示您网站年龄的一种选择。它的位置在页面的底部。<br>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2013</span></span><br></pre></td></tr></table></figure><h2 id="11-Footer-Custom-Text"><a href="#11-Footer-Custom-Text" class="headerlink" title="11. Footer Custom Text"></a>11. Footer Custom Text</h2><p><code>footer_custom_text</code>是用于在页脚区域显示一些文本的选项。它支持HTML。</p><p>设置 <code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href="https://molunerfinn.com"&gt;blog&lt;/a&gt;!</span></span><br><span class="line"><span class="attr">footer_custom_text:</span> <span class="string">hitokoto</span>    <span class="comment"># 1.7.0版本，如果设置hitokoto，则会随机生成文本</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-第三方包支持"><a href="#5-第三方包支持" class="headerlink" title="5. 第三方包支持"></a>5. 第三方包支持</h1><h2 id="1-本地搜索"><a href="#1-本地搜索" class="headerlink" title="1. 本地搜索"></a>1. 本地搜索</h2><ol><li>安装 <code>npm install hexo-generator-search --save</code></li><li>设置 <code>melody.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span> <span class="comment"># if there are no result</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-即时贴"><a href="#2-即时贴" class="headerlink" title="2. 即时贴"></a>2. 即时贴</h2><p>具有可以使指定博客显示到首页的功能</p><ol><li>转到hexo网站文件夹</li><li><code>npm uninstall hexo-generator-index --save</code> 然后 <code>npm install hexo-generator-index-pin-top --save</code></li><li>您可以将<code>top: True</code>字段添加到帖子的最前面以将其固定。<br>例：<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: xxxx</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  - </span>xxx</span><br><span class="line">date: 2018-08-08 08:08:08</span><br><span class="line">top: True</span><br><span class="line">---</span><br><span class="line">// ....</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-分享系统"><a href="#3-分享系统" class="headerlink" title="3. 分享系统"></a>3. 分享系统</h2><p><strong>Sharejs</strong><br>配置<code>melody.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">disabled_sites:</span> <span class="string">你不想分享的站点</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-附加包支持"><a href="#6-附加包支持" class="headerlink" title="6. 附加包支持"></a>6. 附加包支持</h1><h2 id="1-PWA"><a href="#1-PWA" class="headerlink" title="1. PWA"></a>1. PWA</h2><p>要具有的PWA功能theme-melody，您需要执行以下操作：</p><ol><li><p>转到hexo网站文件夹</p></li><li><p><code>npm install hexo-offline --save</code> 要么 <code>yarn add hexo-offline</code></p></li><li><p>修改<code>_config.yml</code> 将以下内容添加到站点<code>_config.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">offline:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">10485760</span> <span class="comment"># 缓存的最大文件大小，以字节为单位</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public/**/*.&#123;js,html,css,png,jpg,gif,svg,webp,eot,ttf,woff,woff2&#125;</span></span><br><span class="line">  <span class="comment"># 静态文件合集，如果你的站点使用了例如webp格式的文件，请将文件类型添加进去。</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="comment"># CDNs - should be cacheFirst, since they should be used specific versions so should not change</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span> <span class="comment"># 如果你需要加载CDN资源，请配置该选项，如果没有，可以不配置。</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">your_websie_url</span> <span class="comment"># 可替换成你的 url</span></span><br></pre></td></tr></table></figure></li><li><p>打开中的pwa选项<code>melody.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="comment"># manifest.json的url, 通常可以设置成 /manifest.json</span></span><br><span class="line">  <span class="comment"># 从v1.5.6开始你可以修改PWA的主题色和icon了。</span></span><br><span class="line">  <span class="comment"># 如果不明白这些有什么用，或者不想配置可以忽视下面的配置</span></span><br><span class="line">  <span class="comment"># See https://realfavicongenerator.net/</span></span><br><span class="line">  <span class="comment"># theme_color: "#1B9EF3"</span></span><br><span class="line">  <span class="comment"># apple_touch_icon: /apple-touch-icon.png</span></span><br><span class="line">  <span class="comment"># favicon_32_32: /favicon-32x32.png</span></span><br><span class="line">  <span class="comment"># favicon_16_16: /favicon-16x16.png</span></span><br><span class="line">  <span class="comment"># mask_icon: /safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>source/</code>目录中创建一个<code>manifest.json</code>文件。</p> <details>     <summary>manifest.json</summary><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"short_name"</span>: <span class="string">"Junzhou"</span>,</span><br><span class="line">    <span class="attr">"theme_color"</span>: <span class="string">"#49b1f5"</span>,</span><br><span class="line">    <span class="attr">"background_color"</span>: <span class="string">"#49b1f5"</span>,</span><br><span class="line">    <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="attr">"icons"</span>: [ </span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/36.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"36x36"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"src"</span>: <span class="string">"images/pwaicons/48.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/72.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"72x72"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/96.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"96x96"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/144.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"144x144"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"src"</span>: <span class="string">"images/pwaicons/192.png"</span>,</span><br><span class="line">          <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"src"</span>: <span class="string">"images/pwaicons/512.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span>: <span class="string">"512x512"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">          &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"splash_pages"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></li></ol><h2 id="2-Live2D-Animated-model-pendant"><a href="#2-Live2D-Animated-model-pendant" class="headerlink" title="2. Live2D Animated model pendant"></a>2. Live2D Animated model pendant</h2><p>使用以下命令安装<code>Live2D model</code>，该模块需要root通过终端在博客目录中执行：<br>安装：</p><ul><li><code>npm install --save hexo-helper-live2d</code><br>卸载：</li><li><code>npm uninstall hexo-helper-live2d</code></li></ul><blockquote><p>配置您喜欢的动画模型</p></blockquote><ol><li><a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">对应模块下载</a><ul><li><a href="https://www.linuxwf.com/2020/04/09/Hexo添加Live2d看板动画效果/#添加Live2d看板动画" target="_blank" rel="noopener">模型预览</a></li></ul></li><li>例如，我使用tororo(<code>npm install live2d-widget-model-tororo</code>)，可以直接在上面的下载界面中：<ol><li>手动下载完成后，将所有文件复制<code>packages</code>到<code>node_moduels</code>博客根目录下的文件夹中。</li><li>也可以使用包管理器进行安装。命令格式：<code>npm install model package name</code>也将安装在node_moduels目录中。</li></ol></li><li>打开<code>_config.yml</code>博客根目录的配置文件，并添加以下内容：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span>  <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span>  <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span>   </span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span> <span class="comment"># 下载的动画模型名称</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># 模型显示在网页上的位置</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span>  <span class="comment"># 看板娘x轴位置</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-20</span>  <span class="comment"># 看板娘y轴位置</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 是否在移动设备上显示</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span> <span class="comment"># 移动设备上的缩放</span></span><br><span class="line"><span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2020/01/10/Docker/Docker/"/>
      <url>/2020/01/10/Docker/Docker/</url>
      
        <content type="html"><![CDATA[<ul><li>Docker 是一个开源的应用容器引擎。Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化</li><li>容器技术：在计算机的世界中，容器拥有一段漫长且传奇的历史。容器与管理程序虚拟化（hypervisor virtualization，HV）有所不同，管理程序虚拟化通过中间层将一台或者多台独立的机器虚拟运行与物理硬件之上，而容器则是直接运行在操作系统内核之上的用户空间。因此，容器虚拟化也被称为”操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主级上</li><li>docker-ee<ul><li>收费的</li></ul></li><li>docker-ce<ul><li>免费的</li></ul></li></ul><hr><h2 id="1-Docker特点"><a href="#1-Docker特点" class="headerlink" title="1. Docker特点"></a>1. Docker特点</h2><ol><li><p>上手快：用户只需要几分钟，就可以把自己的程序“Docker 化”。Docker 依赖于“写时复制” (copy-on-write)模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改” 的境界；随后，就可以创建容器来运行应用程序了。大多数 Docker 容器只需要不到 1 秒中即可 启动。由于去除了管理程序的开销，Docker 容器拥有很高的性能，同时同一台宿主机中也 可以运行更多的容器，使用户尽可能的充分利用系统资源</p></li><li><p>职责的逻辑分类：使用 Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如 何管理容器。Docker 设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署 的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题(测试环境都是正 常的，上线后出了问题就归结为肯定是运维的问题)”</p></li><li><p>快速高效的开发生命周期：Docker 的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用 程序具备可移植性，易于构建，并易于协作。(通俗一点说，Docker 就像一个盒子，里面 可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件 件的取。)</p></li><li><p>鼓励使用面向服务的架构：Docker 还鼓励面向服务的体系结构和微服务架构。Docker 推荐单个容器只运行一个应 用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服 务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序 都变得非常简单，同时也提高了程序的内省性。(当然，可以在一个容器中运行多个应用程 序)</p></li></ol><hr><h2 id="2-Docker客户端和服务器"><a href="#2-Docker客户端和服务器" class="headerlink" title="2. Docker客户端和服务器"></a>2. Docker客户端和服务器</h2><ul><li>Docker 是一个客户端-服务器(C/S)架构程序。Docker 客户端只需要向 Docker 服务器 或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker 提供了 一个命令行工具 Docker 以及一整套 RESTful API。你可以在同一台宿主机上运行 Docker 守护 进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程</li></ul><hr><h2 id="3-Docker镜像"><a href="#3-Docker镜像" class="headerlink" title="3. Docker镜像"></a>3. Docker镜像</h2><ul><li>镜像是构建 Docker 的基石。用户基于镜像来运行自己的容器，镜像也是 Docker 生命周 期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构 建出来。例如:<ul><li>添加一个文件;</li><li>执行一个命令;</li><li>打开一个窗口。</li></ul></li><li>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新</li></ul><hr><h2 id="4-Registry镜像注册"><a href="#4-Registry镜像注册" class="headerlink" title="4. Registry镜像注册"></a>4. Registry镜像注册</h2><ul><li>Docker 用 Registry 来保存用户构建的镜像。</li><li>Registry 分为公共和私有两种。Docker 公司 运营公共的 Registry 叫做 Docker Hub</li><li>用户可以在 Docker Hub 注册账号，分享并保存自己的 镜像(说明:在 Docker Hub 下载镜像巨慢，可以自己构建私有的 Registry）</li></ul><hr><h2 id="5-Docker容器"><a href="#5-Docker容器" class="headerlink" title="5. Docker容器"></a>5. Docker容器</h2><ul><li>Docker 可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容 器即可</li><li>容器是基于镜像启动起来的，容器中可以运行一个或多个进程</li><li>我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。容器基于 镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务</li><li>安装好的一个虚拟机</li></ul><hr><h2 id="6-Docker镜像"><a href="#6-Docker镜像" class="headerlink" title="6. Docker镜像"></a>6. Docker镜像</h2><ul><li>Docker 把应用程序及其依赖，打包在 image 文件里面</li><li>只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例</li><li>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在自己操作系统所使用的image 基础上，往里面加入 Apache 服务器，形成你的image</li><li>就是一个操作系统文件</li></ul><hr><h2 id="7-Docker容器操作"><a href="#7-Docker容器操作" class="headerlink" title="7. Docker容器操作"></a>7. Docker容器操作</h2><ol><li><p><strong>创建容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run [option] 镜像名</span><br><span class="line">-i 表示以“交互模式”运行容器</span><br><span class="line">-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。</span><br><span class="line">–name 为创建的容器命名</span><br><span class="line">-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</span><br><span class="line">-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</span><br><span class="line">-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</span><br><span class="line">-e 为容器设置环境变量</span><br><span class="line">–network&#x3D;host 表示将主机的网络环境映射到容器中，容器的网络与主机相同</span><br></pre></td></tr></table></figure></li><li><p><strong>停止或启动容器</strong></p></li></ol><ul><li><code>docker container stop 容器名或ID</code></li></ul><hr><h2 id="8-centos部署docker"><a href="#8-centos部署docker" class="headerlink" title="8. centos部署docker"></a>8. centos部署docker</h2><ol><li><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加docker-repo源</span></span><br><span class="line">yum install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尝试安装docker-ce</span></span><br><span class="line">yum erase docker-common-2:1.13.1-96.gitb2f74b2.el7.centos.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除已安装的docker</span></span><br></pre></td></tr></table></figure></li><li><p>开启docker服务</p><ul><li><code>systemctl start docker</code></li></ul></li></ol><ol start="3"><li><p>查看docker镜像</p><ul><li>REPOSITORY：镜像所在的仓库名称</li><li>TAG：镜像标签</li><li>IMAGEID：镜像ID</li><li>CREATED：镜像的创建日期(不是获取该镜像的日期)</li><li>SIZE：镜像大小<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看命令</span></span><br><span class="line">docker image ls</span><br><span class="line">docker  rm</span><br></pre></td></tr></table></figure></li></ul></li><li><p>拉取镜像及删除镜像</p><ul><li><code>sudo docker image pull delron/fastdfs</code><blockquote><p>上面的代码中，docker image pull是抓取 image 文件的命令。delron/fastdfs是 image 文件的名字</p></blockquote></li></ul></li><li><p>开启fastdfs的tracker服务</p><ul><li><code>docker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker</code></li></ul></li><li><p>开启fastdfs的storage服务</p><ul><li><code>docker run -dti --network=host --name storage -e TRACKER_SERVER=47.96.179.72:22122 -v /var/fdfs/storage:/var/fdfs delron/fastdfs storage</code></li></ul></li><li><p>关闭docker容器</p><ul><li><code>docker stop container_id</code></li></ul></li><li><p>查看当前运行的容器</p><ul><li><code>docker container ls</code></li></ul></li><li><p>查看docker进程</p><ul><li><code>docker ps -a</code></li></ul></li><li><p>重启</p><ul><li><code>docker  container stop storage    # 关闭容器</code></li><li><code>docker  container rm  storage    # 结束进程</code></li><li><code>docker run -dti --network=host --name storage -e TRACKER_SERVER=47.96.179.72:22122 -v /var/fdfs/storage:/var/fdfs delron/fastdfs storage    # 从新启动</code></li></ul></li><li><p>结束任务</p><ul><li><code>docker rm 12312e(进程号)</code></li></ul></li></ol><hr><h2 id="9-ATOM连接docker"><a href="#9-ATOM连接docker" class="headerlink" title="9. ATOM连接docker"></a>9. ATOM连接docker</h2><ol><li><p>打开 ATOM 点击FILE==&gt;settings</p></li><li><p>点击 install</p><img src="/2020/01/10/Docker/Docker/cli_install.jpg" title="进入settings" width="300px"></li><li><p>输入 Remote-FTP</p><img src="/2020/01/10/Docker/Docker/input_Remote-FTP.jpg" title="输入 Remote-FTP" width="300px"></li><li><p>安装插件</p><img src="/2020/01/10/Docker/Docker/install_Remote-FTP.jpg" title="安装 Remote-FTP" width="300px"></li><li><p>第五步建立在安装成功的基础上，可以在自己本地建一个文件夹，我的叫fastDFS，打开就可以</p><img src="/2020/01/10/Docker/Docker/open_folder.jpg" title="fastDFS文件夹" width="300px"></li><li><p>在创建的文件夹下执行以下操作 ，创建ssh连接的文件<br><img src="/2020/01/10/Docker/Docker/create_link.jpg" title="创建连接文件" width="300px"></p></li><li><p>配置完之后，保存并退出，一定要保存<br><img src="/2020/01/10/Docker/Docker/deploy_FTP.jpg" title="配置连接文件" width="300px"></p></li><li><p>按图点击<br><img src="/2020/01/10/Docker/Docker/cli_toggle.jpg" title="点击toggle" width="300px"></p></li><li><p>按图点击<br><img src="/2020/01/10/Docker/Docker/cli_remote.jpg" title="点击remote" width="300px"></p></li><li><p>输入ssh连接的密码<br><img src="/2020/01/10/Docker/Docker/input_Remote-FTP.jpg" title="输入ssh连接密码" width="300px"></p></li><li><p>成功<br><img src="/2020/01/10/Docker/Docker/win.jpg" title="连接成功" width="300px"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
